# =====================================================================
#                  Stormpath Client Configuration
# =====================================================================
#
# If you have only one application in Stormpath, and your app runs on a single JVM, this configuration file
# is entirely optional.
#
# However, if you have more than one application, or your app runs on more than one JVM (clustered/distributed),
# you may need to specify some config changes.  Please see the sections below.


# =========== Application HREF ======================
#
# If you have more than one application in Stormpath, you *must* specify which registered application to reference
# in this webapp by uncommenting the following line and specifying the app's Stormpath HREF:
#
# stormpath.application.href = YOUR_APPLICATION_HREF_HERE
#
# If you have only one application, it will be auto-discovered when the application starts up.
#
# After startup, you can access the application instance via a ServletRequest or ServletContext.  For example:
#
# Application myStormpathApplication = ApplicationResolver.INSTANCE.getApplication(request.getServletContext());


# =========== API Key ======================
#
# By default, your API Key file will be auto-discovered and used based on the logic
# documented in the com.stormpath.sdk.api.ApiKeyBuilder#build() JavaDoc.
#
# If you preferred otherwise, you could manually specify a location here instead:
# stormpath.apiKey.file = LOCATION
#
# LOCATION can be a fully qualified file path, a classpath location like classpath:stormpath.properties or a
# URL like http(s)://myhost:port/path/to/stormpath.properties (notice the classpath: and http:/https: prefixes).
#
# Or, instead of pointing to a file, you could manually specify values here, for example:
#
# stormpath.apiKey.id = YOUR_API_KEY_ID_HERE
#
# It is strongly recommended however that you NOT embed API Key secrets in project text files like this one.  You might
# want to specify the following property instead via a JVM system property at application startup, for example:
#
# -Dstormpath.apiKey.secret=YOUR_API_KEY_SECRET


# =========== Caching ======================
#
# THIS PROPERTY-BASED CACHE CONFIG IS ONLY SAFE FOR WEB APPS THAT RUN ON A SINGLE JVM!
#
# If your webapp runs on multiple JVMs (because it is a clustered or distributed webapp), you should configure the
# Stormpath Client with a cluster-safe coherent CacheManager instance (for example, using Hazelcast) instead of this
# single-JVM-cache-manager config.
#
# That said, if your app runs on a single JVM, the following config options can be helpful:
#
# Time-To-Live default for all cache regions (millis).  3,600,000 millis = 1 hour
# stormpath.cache.ttl = 3600000
#
# Time-To-Idle default for all cache regions (millis):
# stormpath.cache.tti = 3600000
#
# You can configure a specific cache region's ttl and tti by prefixing the region name with 'stormpath.cache.' and
# suffixing it with '.ttl' or '.tti' for TTL or TTI respectively.  For example, a tti of 5 min (300000 ms) and a
# ttl of 1 hour (3600000 ms):
#
# stormpath.cache.This Is My Cache Region Name.tti = 300000
# stormpath.cache.This Is My Cache Region Name.ttl = 3600000
#
# The Stormpath Client creates a cache region per data type: all cached Account objects are in one region, all cached
# Group objects in another, etc.  The region names are equal to the _interface_ name of each type.  For example:
#
# com.stormpath.sdk.account.Account
# com.stormpath.sdk.group.Group
#
# Therefore, when adding the necessary property prefix and suffix, you might have the following config lines:
#
# stormpath.cache.com.stormpath.sdk.account.Account.tti = 3600000
# stormpath.cache.com.stormpath.sdk.group.Group.ttl = 4800000
#
# etc.


# =========== HTTP Proxy Config ============
# If your app requires HTTP communication to Stormpath to go through an HTTP Proxy:
#
# stormpath.proxy.host = foo
# stormpath.proxy.port = 8888
# stormpath.proxy.username = jsmith
#
# It is strongly recommended that you don't embed passwords in text files.  You might want to specify the
# following property instead via a JVM system property, for example: -Dstormpath.proxy.password=aPassword
#
# stormpath.proxy.password = aPassword


# =========== Authentication Scheme ========
# If you're on Google App Engine, you might require this (otherwise it is recommended to not change it):
# stormpath.authentication.scheme = basic


# =====================================================================
#              Web Application Configuration
# =====================================================================

# The context-relative path to the login view:
# stormpath.web.login.uri = /login

# The context-relative path where the user will be redirected after logging in if a 'next' request parameter is missing
# stormpath.web.login.nextUri = /

# The context-relative path that will log out the user if visited:
# stormpath.web.logout.uri = /logout

# The context-relative path where the user will be redirected after logging out if a 'next' request parameter is missing
# stormpath.web.logout.nextUri = /

# The context-relative path to the register ('new user') view:
# stormpath.web.register.uri = /register

# The context-relative path where the user will be redirected after registering if a 'next' request parameter is missing
# stormpath.web.register.nextUri = /

# The context-relative path where an authenticated (already logged in) user will be redirected when attempting to
# access a url they are not allowed to access.  Unauthenticated users will be redirected to the login screen, and once
# logged in, they'll be redirected back to the page they were trying to access.
# stormpath.web.unauthorized.uri = /unauthorized

# Registration form fields.  Fields can be required, optional or disabled by specifying one of the following values:
#
# disabled: the field will NOT exist in the form
# optional: the field will be shown but the user does not need to populate it
# required: the field will be shown and the user must populate it with a valid value
#
# Tip: re-ordering the form field declarations below will automatically re-order how they are displayed in the view!
#
# stormpath.web.register.form.fields.givenName  = disabled
# stormpath.web.register.form.fields.middleName = disabled
# stormpath.web.register.form.fields.surname    = disabled
# stormpath.web.register.form.fields.username   = disabled
# stormpath.web.register.form.fields.email      = required
# stormpath.web.register.form.fields.password   = required

stormpath.web.login.token.authorizedJavaScriptOriginUris = http://localhost https://localhost http://localhost:8080 https://murmuring-earth-1696.herokuapp.com http://murmuring-earth-1696.herokuapp.com

#stormpath.web.uris./dashboard = account

#stormpath.web.uris./ = anon
#stormpath.web.uris./** = authc

# =========== Servlet Request Behavior ========
#
# The next property controls the output of httpServletRequest.getRemoteUser() if the user is authenticated.
#
# The value can be one of: email, username, givenName, href or bypass:
#
# email:     getRemoteUser() will return account.getEmail();
# username:  returns account.getUsername();
# givenName: returns account.getGivenName();
# href:      returns account.getHref();
# bypass:    disables Stormpath behavior for this property and falls back to the Servlet Container's implementation.
#
# stormpath.web.request.remoteUser.strategy = username


# The next property controls the output of httpServletRequest.getUserPrincipal() if the user is authenticated.
#
# The value can be one of: account, email, username, givenName, href or bypass:
#
# account:   returns a com.stormpath.sdk.servlet.http.AccountPrincipal that represents the entire Account object
# email:     returns a com.stormpath.sdk.servlet.http.EmailPrincipal matching account.getEmail()
# username:  returns a com.stormpath.sdk.servlet.http.UsernamePrincipal matching account.getUsername()
# givenName: returns a com.stormpath.sdk.servlet.http.GivenNamePrincipal matching account.getGivenName()
# href:      returns a com.stormpath.sdk.servlet.http.HrefPrincipal matching account.getHref()
# bypass:    disables Stormpath behavior for this property and falls back to the Servlet Container's implementation.
#
# stormpath.web.request.userPrincipal.strategy = account
